Cheat sheet for Rest API CRUD operations map to HTTP verbs and SQL operations

Operation	  SQL	      HTTP verb	      Rest web service
Create	        INSERT	      POST/PUT	          POST
Read	        SELECT	      GET	          GET
Update	        UPDATE	      POST/PUT/PATCH	  PUT
Delete	        DELETE	      DELETE	          DELETE

Annotation commonly used in Model layer that from Hibernate or SQL:

@Entity annotation shows that the class is a persistent Java class.
@Id annotation shows that the annotated field is the primary key.
@GeneratedValue annotation is used to specify the generation strategy used for the primary key.
@Column annotation defines the column in the database that maps the annotated field.
@CreationTimestamp annotation is a JPA annotation that automatically updates the todo creation timestamp.
@UpdateTimestamp annotation is a JPA annotation that automatically updates the todo last modified timestamp.

Annotation commonly used in Model layer that from Lombok:
@Data annotation is from project Lombok. It generates the getters and setters for all the fields that we have in the todo class, equals method, and a toString method.
@NoArgsConstructor annotation is from project Lombok and it generates an empty constructor for our Todo class.
@AllArgsConstructor annotation is from project Lombok and it generates a constructor with all the fields that are available in our Todo class.
@Builder annotation is from project Lombok. It makes it possible for us to use the builder pattern with our Todo model.

Annotation commonly used in Repository layer from Spring:
@service annotation makes Spring context be aware of this class as a service.

Annotation commonly used in Controller layer from Spring:
@RestController annotation marks this class as a controller that can process the incoming HTTP requests.
@RequestMapping("some path eg. /api/v1/todo ") annotation sets the base path to the resource endpoints in the controller as /api/v1/todo.
We inject the TodoService through our contractor to be able to use the various methods defined in it within the TodoController class.
@GetMapping annotation indicates that the function processes a GET request.
@PostMapping annotation indicates that a function processes a POST request.
@PutMapping annotation indicates that a function processes a PUT request.
@DeleteMapping annotation indicates that a function processes a DELETE request.

Annotation commonly use in BootStrapper layer when using builder pattern:
@Component annotation informs Spring that this class is a Spring component.

If access in order:
HTTP Rquests --> Controller --> repository --> DAO --> Database


Concept:

Repository interface pattern
Repository pattern main goal was the abstraction of the database access code. JPA already provides this abstraction. So, there is no need for another layer that provides 
the same functionality.
There is a lot of change as the initail goal of Repositiory pattern. Nowaday, it is use as a higher level of abstraction and hides all specifics of the data store.
Benefit:
1.That enables you to replace a data store with a completely different one, e.g., a relational database with a NoSQL database.
2.all database access methods for an entity are defined in the same repository and not in different parts of the business logic. 
That makes the implementation of your business logic and reusing queries or other database operations much easier.

DAO Pattern
DAO stands for Data Access Object. DAO Design Pattern is used to separate the data persistence logic in a separate layer. 
This way, the service remains completely in dark about how the low-level operations to access the database is done.
DAO interface basically is CRUD 
-Data Access Object Interface - This interface defines the standard operations to be performed on a model object(s).
-Data Access Object concrete class - This class implements above interface. 
  This class is responsible to get data from a data source which can be database / xml or any other storage mechanism.
-Model Object or Value Object - This object is simple POJO containing get/set methods to store data retrieved using DAO class.

Difference between DAO and repository:
A repository also deals with data and hides queries similar to DAO. However, it sits at a higher level, closer to the business logic of an app.
Consequently, a repository can use a DAO to fetch data from the database and populate a domain object. Or, 
it can prepare the data from a domain object and send it to a storage system using a DAO for persistence.

In short, DAO is more close to database vs repository is more close to business logic

-DAO is an abstraction of data persistence. However, a repository is an abstraction of a collection of objects
-DAO is a lower-level concept, closer to the storage systems. However, Repository is a higher-level concept, closer to the Domain objects
-DAO works as a data mapping/access layer, hiding ugly queries. However, a repository is a layer between domains and data access layers, 
  hiding the complexity of collating data and preparing a domain object
-DAO can't be implemented using a repository. However, a repository can use a DAO for accessing underlying storage



Reference from:
https://www.section.io/engineering-education/spring-boot-crud-api/
https://thorben-janssen.com/implementing-the-repository-pattern-with-jpa-and-hibernate/
*https://www.baeldung.com/java-dao-vs-repository* with very good example
